// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// scale_cpp
arma::mat scale_cpp(arma::mat M);
RcppExport SEXP _OSFD_scale_cpp(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(scale_cpp(M));
    return rcpp_result_gen;
END_RCPP
}
// knnx_my
Rcpp::List knnx_my(arma::mat& data, arma::mat& points, int k);
RcppExport SEXP _OSFD_knnx_my(SEXP dataSEXP, SEXP pointsSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(knnx_my(data, points, k));
    return rcpp_result_gen;
END_RCPP
}
// knn_my
Rcpp::List knn_my(arma::mat& data, int k);
RcppExport SEXP _OSFD_knn_my(SEXP dataSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(knn_my(data, k));
    return rcpp_result_gen;
END_RCPP
}
// runif_in_sphere_cpp
arma::mat runif_in_sphere_cpp(arma::uword n, arma::uword p);
RcppExport SEXP _OSFD_runif_in_sphere_cpp(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(runif_in_sphere_cpp(n, p));
    return rcpp_result_gen;
END_RCPP
}
// ball_gen
arma::mat ball_gen(arma::rowvec cen, double rad, arma::uword n, arma::uword p, Nullable<NumericMatrix> sub_, bool rand, Nullable<NumericMatrix> twinsample_);
RcppExport SEXP _OSFD_ball_gen(SEXP cenSEXP, SEXP radSEXP, SEXP nSEXP, SEXP pSEXP, SEXP sub_SEXP, SEXP randSEXP, SEXP twinsample_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type cen(cenSEXP);
    Rcpp::traits::input_parameter< double >::type rad(radSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type sub_(sub_SEXP);
    Rcpp::traits::input_parameter< bool >::type rand(randSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type twinsample_(twinsample_SEXP);
    rcpp_result_gen = Rcpp::wrap(ball_gen(cen, rad, n, p, sub_, rand, twinsample_));
    return rcpp_result_gen;
END_RCPP
}
// approx_gen
arma::mat approx_gen(arma::mat X, Rcpp::List d, arma::uword p, bool rand, Nullable<NumericMatrix> twinsample_);
RcppExport SEXP _OSFD_approx_gen(SEXP XSEXP, SEXP dSEXP, SEXP pSEXP, SEXP randSEXP, SEXP twinsample_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type rand(randSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type twinsample_(twinsample_SEXP);
    rcpp_result_gen = Rcpp::wrap(approx_gen(X, d, p, rand, twinsample_));
    return rcpp_result_gen;
END_RCPP
}
// filldist_cpp
arma::mat filldist_cpp(arma::mat M, arma::uword p, bool rand, Nullable<NumericMatrix> twinsample_);
RcppExport SEXP _OSFD_filldist_cpp(SEXP MSEXP, SEXP pSEXP, SEXP randSEXP, SEXP twinsample_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type rand(randSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type twinsample_(twinsample_SEXP);
    rcpp_result_gen = Rcpp::wrap(filldist_cpp(M, p, rand, twinsample_));
    return rcpp_result_gen;
END_RCPP
}
// perturb_cpp
arma::rowvec perturb_cpp(arma::mat D, arma::vec filldist, int q, Nullable<NumericMatrix> CAND_, std::string cri, double balance_ratio, bool rand, Nullable<NumericMatrix> twinsample_);
RcppExport SEXP _OSFD_perturb_cpp(SEXP DSEXP, SEXP filldistSEXP, SEXP qSEXP, SEXP CAND_SEXP, SEXP criSEXP, SEXP balance_ratioSEXP, SEXP randSEXP, SEXP twinsample_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type filldist(filldistSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type CAND_(CAND_SEXP);
    Rcpp::traits::input_parameter< std::string >::type cri(criSEXP);
    Rcpp::traits::input_parameter< double >::type balance_ratio(balance_ratioSEXP);
    Rcpp::traits::input_parameter< bool >::type rand(randSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type twinsample_(twinsample_SEXP);
    rcpp_result_gen = Rcpp::wrap(perturb_cpp(D, filldist, q, CAND_, cri, balance_ratio, rand, twinsample_));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_OSFD_scale_cpp", (DL_FUNC) &_OSFD_scale_cpp, 1},
    {"_OSFD_knnx_my", (DL_FUNC) &_OSFD_knnx_my, 3},
    {"_OSFD_knn_my", (DL_FUNC) &_OSFD_knn_my, 2},
    {"_OSFD_runif_in_sphere_cpp", (DL_FUNC) &_OSFD_runif_in_sphere_cpp, 2},
    {"_OSFD_ball_gen", (DL_FUNC) &_OSFD_ball_gen, 7},
    {"_OSFD_approx_gen", (DL_FUNC) &_OSFD_approx_gen, 5},
    {"_OSFD_filldist_cpp", (DL_FUNC) &_OSFD_filldist_cpp, 4},
    {"_OSFD_perturb_cpp", (DL_FUNC) &_OSFD_perturb_cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_OSFD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
